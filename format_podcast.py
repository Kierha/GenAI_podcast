# format_podcast.py ‚Äî R√©√©criture orale adapt√©e au podcast üéôÔ∏è + debug logging

import os
from openai import OpenAI
from dotenv import load_dotenv

# Charger la cl√© OpenRouter depuis .env
load_dotenv()
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1"
)

MODEL_NAME = "deepseek/deepseek-chat-v3-0324:free"

PROMPT_TEMPLATE = """
Tu es un assistant √©ditorial expert dans l‚Äôadaptation de d√©bats en **scripts audio immersifs**, jou√©s par deux voix synth√©tiques (No√© et Lina), compatibles avec ElevenLabs.

üéØ Objectif :
Transformer un d√©bat √©crit en **dialogue naturel, vivant et rythm√©**, fluide √† l‚Äô√©coute, optimis√© pour une synth√®se vocale r√©aliste.

üß† R√®gles de r√©√©criture :

1. Adopte un **style oral, spontan√© et fluide** :
   - phrases courtes ou d√©coup√©es naturellement,
   - langage parl√©, pas trop formel, mais clair,
   - rythme naturel, proche d‚Äôune vraie conversation.

2. Donne √† chaque intervenant une **voix identifiable** :
   - **No√©** : logique, sec, sarcastique.
   - **Lina** : vive, provocante, chaleureuse.

3. Structure le script comme ceci :
   - **No√©** : <speak> ... </speak>
   - **Lina** : <speak> ... </speak>

4. Utilise **mod√©r√©ment et intelligemment** les balises SSML **compatibles ElevenLabs** :
   - `<break time="300ms"/>` : pour une pause br√®ve **uniquement quand elle am√©liore le rythme** (pas apr√®s chaque phrase !).
   - `<emphasis>` : pour insister sur un mot important (1 √† 2 max par r√©plique).
   - `<prosody rate="slow"> ... </prosody>` : pour ralentir une phrase forte, jamais tout le paragraphe.
   - `<s>` : pour marquer un d√©coupage logique dans une phrase longue.

   ‚ö†Ô∏è **Important** : N‚Äôabuse jamais des pauses `<break>` ‚Äî une pause mal plac√©e casse le rythme et donne un rendu artificiel.

5. Pour exprimer les **√©motions** :
   - Appuie-toi sur la **ponctuation expressive** (`!`, `?`, `...`) et des formulations naturelles (ex. : ¬´ Non mais... tu rigoles ?! ¬ª)
   - ‚ùå N‚Äôutilise **jamais** d‚Äôindications de ton entre parenth√®ses. Tout doit √™tre implicite dans la formulation.

6. Ne termine **jamais** par une conclusion automatique ou un r√©sum√©.

‚ùå **Ne fournis pas de commentaire final, de note de bas de page ni de mise en contexte.**
‚úÖ La derni√®re r√©plique du d√©bat doit √™tre la **derni√®re ligne du fichier**.
---

Voici le d√©bat √† reformuler :

---
{debate_text}
---

R√©√©cris maintenant le script dans ce format immersif, fluide et balis√© pour ElevenLabs :

Sortie attendu : 

"""

def format_podcast_script(debate_text: str) -> str:
    full_prompt = PROMPT_TEMPLATE.format(debate_text=debate_text)
    # print("üîç full_prompt : " + full_prompt)

    try:
        completion = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {"role": "user", "content": full_prompt}
            ],
            extra_headers={
                "HTTP-Referer": "https://yourapp.com",
                "X-Title": "GenAI Podcast"
            },
            extra_body={}
        )

        # Debug brut
        # print(" Contenu brut de la r√©ponse:")
        # print(completion)

        if not completion.choices or not completion.choices[0].message.content:
            print("‚ö†Ô∏è R√©ponse vide ou invalide.")
            return ""

        final_script = completion.choices[0].message.content.strip()

        os.makedirs("output", exist_ok=True)
        with open("output/podcast_ready.txt", "w", encoding="utf-8") as f:
            f.write(final_script)

        print("‚úÖ Script podcast g√©n√©r√© et sauvegard√© dans output/podcast_ready.txt")
        return final_script

    except Exception as e:
        print("‚ùå Erreur lors de l'appel √† l'API ou de l'acc√®s √† la r√©ponse :", e)
        return ""